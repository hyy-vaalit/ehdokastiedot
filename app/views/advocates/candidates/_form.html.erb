<script>
  $(function() {
    var email_element          = $('#candidate_email');
    var firstname_element      = $('#candidate_firstname');
    var lastname_element       = $('#candidate_lastname');
    var candidate_name_element = $('#candidate_candidate_name');
    var candidate_ssn_element  = $('#candidate_social_security_number');
    var candidate_notes_element = $('#candidate_notes');
    var errorCssClass           = "inline-errors";

    email_element.bind('focusin', function(event) {
      suggest_email_address(email_element, firstname_element, lastname_element);
    });

    firstname_element.bind('focusout', function(event) {
      if (lastname_element.val() && firstname_element.val() ) {
        suggest_candidate_name(candidate_name_element, firstname_element, lastname_element);
        suggest_email_address(email_element, firstname_element, lastname_element);
      }
    });

    candidate_name_element.bind('focusin', function(event) {
      suggest_candidate_name(candidate_name_element, firstname_element, lastname_element);
    });

    candidate_name_element.bind('focusout', function(event) {
      replace_quotes(candidate_name_element);
    });

    candidate_ssn_element.bind('focusout', function(event) {
      if (!isValidSSN(candidate_ssn_element)) {
        addError(candidate_ssn_element, errorCssClass, "Virheellinen hetu (voit tallettaa ehdokkaan tästä huolimatta, mutta jätä siitä merkintä 'Huomioita'-kenttään).");
        addNote(candidate_notes_element, "Virheellinen hetu");
      } else {
        removeError(candidate_ssn_element, errorCssClass);
      }
    });

    function addError(element, errorCssClass, message) {
      element.parent().append('<p class="'+ errorCssClass +'">'+ message +'</p>');
    }

    function removeError(element, errorCssClass) {
      var selector = '.'+errorCssClass;

      element.parent().find(selector).remove();
    }

    function addNote(element, message) {
      var matchMessage = new RegExp(message,"gi");
      var oldValue = element.val();

      if (oldValue.match(matchMessage)) {
        return;
      }
      else if (oldValue != "") {
        message = ", " + message;
      }

      element.val(oldValue + message);
    }

    function replace_quotes(element) {
        element.val(function(index, value) {
          return value.replace(/"/g, "'");
        });
    }

    function suggest_candidate_name(candidate_name_element, firstname_element, lastname_element) {
      var lastname = lastname_element.val().trim();
      var firstname = first_of_firstnames(firstname_element.val().trim());

      if (!candidate_name_element.val()) {
        candidate_name_element.val(lastname + ', ' + firstname);
      }
    }

    function suggest_email_address(email_element, firstname_element, lastname_element) {
      var suggested_domain = "@helsinki.fi";
      var lastname         = lastname_element.val().toLowerCase().trim();
      var firstname        = first_of_firstnames(firstname_element.val().toLowerCase().trim());

      if (!email_element.val()) {
        email_element.val(firstname + '.' + lastname + suggested_domain);
      }
    }

    function first_of_firstnames(firstnames) {
      return firstnames.split(' ')[0];
    }

    function calculateCheckChar(birthday, identifier) {
      var index = (parseInt(birthday+identifier, 10) % 31);
      var checksums = "0123456789ABCDEFHJKLMNPRSTUVWXY";
      return checksums[index];
    }

    function isValidSSN(ssnElement) {
      var ssn              = ssnElement.val();
      var birthday         = ssn.substring(0, 6);
      var separator        = ssn[6];
      var checkNum         = ssn.substring(7,10);
      var checkChar        = (ssn[10] != undefined) ? ssn[10].toUpperCase() : "";

      if (ssn.length < 11 || ssn.length > 11)
        return false;

      if (!birthday.match(/^[0-9]+$/) || !separator.match(/^[+-A]$/) || !checkNum.match(/^[0-9]+$/))
        return false;

      if (calculateCheckChar(birthday, checkNum) != checkChar)
        return false;

      return true
    }
  });
</script>

<%= f.input :lastname, :label => "Sukunimi" %>    <%= f.input :firstname, :label => "Kaikki etunimet" %>

<%= f.input :social_security_number, :label => "Henkilötunnus" %>
  <%= f.input :faculty, :label => "Tiedekunta" %>

<%#= f.input Laitoksen nimi virallisessa muodossa (mikäli tiedekunnassa on laitoksia) %>

<%= f.input :address, :label => "Lähiosoite" %>
  <%= f.input :postal_information, :label => "Postinumero ja postitoimipaikka" %>

<%= f.input :phone_number, :label => "Puhelinnumero" %>

  <%= f.input :email, :label => "Sähköpostiosoite",
                      :hint => "Ehdokasilmoituksen vahvistusilmoitus lähetetään sähköpostitse tähän osoitteeseen." %>

<%= f.input :candidate_name, :label => "Ehdokasnimi (Sukunimi, Etunimi)",
        :hint => "Ehdokkaan nimi siinä muodossa, kuin se halutaan merkittäväksi ehdokaslistojen yhdistelmään (etunimen rinnalla tai sen sijasta voidaan käyttää yleisesti tunnettua puhuttelunimeä tai etunimeä lyhennettynä, eli esimerkiksi Sukunimi, Etunimi; Sukunimi, Puhuttelunimi tai Sukunimi, Etunimi 'Puhuttelunimi'" %>

<%= f.input :notes, :label => "Huomioita HYYn vaalivirkailijalle",
                    :input_html => { :class => 'autogrow', :rows => 3 } %>
